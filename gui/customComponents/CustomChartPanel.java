package fr.inria.contraintes.biocham.customComponents;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

import fr.inria.contraintes.biocham.BiochamDynamicTree;
import fr.inria.contraintes.biocham.modelData.SimulationView;
import fr.inria.contraintes.biocham.plotting.PlotsComparizonWindowUtils;
import fr.inria.contraintes.biocham.utils.Icons;
import fr.inria.contraintes.biocham.utils.Utils;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;



/**
 * Class that creates custom chart panel under the default one from the JFreeChart.jar library, and that is used for visualizing the Boolean plot in the GUI (generated by executing a numerical simulation over the model using the biocham boolean simulator).
 * 
 * @author Dragana Jovanovska  
 */ 

public class CustomChartPanel extends ChartPanel{

	private JMenuItem zoomInBothMenuItem;
	private JMenuItem zoomInDomainMenuItem;
	private JMenuItem zoomInRangeMenuItem;
	private JMenuItem zoomOutBothMenuItem;
	private JMenuItem zoomOutDomainMenuItem;
	private JMenuItem zoomOutRangeMenuItem;
	private JMenuItem zoomResetBothMenuItem;
	private JMenuItem zoomResetDomainMenuItem;
	private JMenuItem zoomResetRangeMenuItem;
	String plotName;
	JFreeChart chart;
	BooleanPlot plotInstance;
	
	public CustomChartPanel(BooleanPlot plot){//JFreeChart ch,String nm){
		super(plot.chart,true,true,true,true,true);
		plotInstance=plot;
		chart=plotInstance.chart;
		plotName=plotInstance.getPlotName();
	}
	
	@Override
	 public JPopupMenu createPopupMenu(boolean properties,
	            boolean copy, boolean save, boolean print, boolean zoom) {

	        JPopupMenu result = new JPopupMenu("Chart:");
	        result.setBackground(Utils.backgroundColor);
	        boolean separator = false;

	        if (properties) {
	            JMenuItem propertiesItem = new JMenuItem(
	                    localizationResources.getString("Properties..."));
	            propertiesItem.setActionCommand(PROPERTIES_COMMAND);	          
	            propertiesItem.addActionListener(this);
	            propertiesItem.setBackground(Utils.backgroundColor);
	            result.add(propertiesItem);
	            separator = true;
	        }


	        if (save) {
	            if (separator) {
	                result.addSeparator();
	                separator = false;
	            }
	            JMenuItem saveItem = new JMenuItem(
	                    localizationResources.getString("Save_as..."));
	            saveItem.setBackground(Utils.backgroundColor);
	            saveItem.setActionCommand(SAVE_COMMAND);
	            saveItem.addActionListener(new ActionListener(){

					public void actionPerformed(ActionEvent arg0) {
						
						String[] imageFormats=ImageIO.getWriterFormatNames();
						for(int i=0;i<imageFormats.length;i++){
							imageFormats[i]= imageFormats[i].toLowerCase();
						}
						java.util.Arrays.sort(imageFormats);
						int counter=0;
						for(int i=0,j=i+1;i<imageFormats.length-1;i++,j++){
							if(!imageFormats[i].equals(imageFormats[j])){
								counter++;
							}
						}				   
						Object[] possibilities = new String[counter+1];
						int i=0,j=0,k=0;
						for(i=0,j=i+1,k=0;i<imageFormats.length-1;i++,j++){
							if(!imageFormats[i].equals(imageFormats[j])){
								possibilities[k]=imageFormats[i];
								k++;
							}
						}
						possibilities[k]="CSV";			
						String s = (String)JOptionPane.showInputDialog(((SimulationView)BiochamDynamicTree.currentModel.getWhoPopupSimulation()).getParentFrame(),
								" \nChoose Save Format:\n",
								"Save Image As",
								JOptionPane.PLAIN_MESSAGE,
								Icons.icons.get("File-1-48x48.png"+1.5),
								possibilities,
								"png");
					    if(s!=null){
							if(s.equals("CSV") && plotInstance.getPlotFile()==null){
					    		   
					    		   JOptionPane.showMessageDialog(((SimulationView)BiochamDynamicTree.currentModel.getWhoPopupSimulation()).getParentFrame(), "You can't save a trace file in a CSV format. It's already in a CSV format.","Warning",JOptionPane.INFORMATION_MESSAGE);
					    		   
					    	}else{
					    				    		
					    			String rep=Utils.showSaveDialog("",((SimulationView)BiochamDynamicTree.currentModel.getWhoPopupSimulation()).getParentFrame(),"image");			
					    			if (rep!=null) {
					    				if(!rep.endsWith("."+s)){
					    					rep+="."+s.toLowerCase();
					    				}
					    				final File file=new File(rep);
					    				if(s.equals("CSV")){	    	
										
										Thread th=new Thread(new Runnable(){
											public void run() {							
												Utils.copyfile(new File(plotInstance.getPlotFile()),file);								
											}});
										th.start();				
									}else{										
										
										BufferedImage b = chart.createBufferedImage(1000,1080);
										try {								
											ImageIO.write(b, s, file);			
										} catch (IOException e1) {
											// TODO Auto-generated catch block
											e1.printStackTrace();
										}
										b = null;																		
									}
								}
					    			rep=null;
					    	}
					    }
					    s=null;
					    imageFormats=null;
					    possibilities=null;
						
					}
	            	
	            });//this
	            result.add(saveItem);
	          
	            JMenuItem addToCompareItem = new JMenuItem("Add To Comparison Window");
	            addToCompareItem.setBackground(Utils.backgroundColor);
	            addToCompareItem.setActionCommand("addToCompare");
	            addToCompareItem.addActionListener(new ActionListener(){

					public void actionPerformed(ActionEvent e) {
						
						BufferedImage image = chart.createBufferedImage(600,480);
						ImageIcon ic =new ImageIcon(image);	
						ic.setDescription(plotName);						
						BiochamDynamicTree.jplots.add(ic);						
						PlotsComparizonWindowUtils.updateComparisonWindow();
						
						image=null;
						ic=null;
					}});
	            result.add(addToCompareItem);
	            separator = true;
	        }

	        if (print) {
	            if (separator) {
	                result.addSeparator();
	                separator = false;
	            }
	            JMenuItem printItem = new JMenuItem(
	                    localizationResources.getString("Print..."));
	            printItem.setActionCommand(PRINT_COMMAND);
	            printItem.setBackground(Utils.backgroundColor);
	            printItem.addActionListener(this);
	            result.add(printItem);
	            separator = true;
	        }

	        if (zoom) {
	            if (separator) {
	                result.addSeparator();
	                separator = false;
	            }

	            JMenu zoomInMenu = new JMenu(
	                    localizationResources.getString("Zoom_In"));

	            zoomInMenu.setBackground(Utils.backgroundColor);
	            this.zoomInBothMenuItem = new JMenuItem(
	                    localizationResources.getString("All_Axes"));
	            zoomInBothMenuItem.setBackground(Utils.backgroundColor);
	            this.zoomInBothMenuItem.setActionCommand(ZOOM_IN_BOTH_COMMAND);
	            this.zoomInBothMenuItem.addActionListener(this);
	            zoomInMenu.add(this.zoomInBothMenuItem);

	            zoomInMenu.addSeparator();

	            this.zoomInDomainMenuItem = new JMenuItem(
	                    localizationResources.getString("Domain_Axis"));
	            zoomInDomainMenuItem.setBackground(Utils.backgroundColor);
	            this.zoomInDomainMenuItem.setActionCommand(ZOOM_IN_DOMAIN_COMMAND);
	            this.zoomInDomainMenuItem.addActionListener(this);
	            zoomInMenu.add(this.zoomInDomainMenuItem);

	            this.zoomInRangeMenuItem = new JMenuItem(
	                    localizationResources.getString("Range_Axis"));
	            zoomInRangeMenuItem.setBackground(Utils.backgroundColor);
	            this.zoomInRangeMenuItem.setActionCommand(ZOOM_IN_RANGE_COMMAND);
	            this.zoomInRangeMenuItem.addActionListener(this);
	            zoomInMenu.add(this.zoomInRangeMenuItem);

	            result.add(zoomInMenu);

	            JMenu zoomOutMenu = new JMenu(
	                    localizationResources.getString("Zoom_Out"));
	            zoomOutMenu.setBackground(Utils.backgroundColor);
	            this.zoomOutBothMenuItem = new JMenuItem(
	                    localizationResources.getString("All_Axes"));
	            this.zoomOutBothMenuItem.setActionCommand(ZOOM_OUT_BOTH_COMMAND);
	            this.zoomOutBothMenuItem.addActionListener(this);
	            zoomOutBothMenuItem.setBackground(Utils.backgroundColor);
	            zoomOutMenu.add(this.zoomOutBothMenuItem);

	            zoomOutMenu.addSeparator();

	            this.zoomOutDomainMenuItem = new JMenuItem(
	                    localizationResources.getString("Domain_Axis"));
	            zoomOutDomainMenuItem.setBackground(Utils.backgroundColor);
	            this.zoomOutDomainMenuItem.setActionCommand(
	                    ZOOM_OUT_DOMAIN_COMMAND);
	            this.zoomOutDomainMenuItem.addActionListener(this);
	            zoomOutMenu.add(this.zoomOutDomainMenuItem);

	            this.zoomOutRangeMenuItem = new JMenuItem(
	                    localizationResources.getString("Range_Axis"));
	            this.zoomOutRangeMenuItem.setActionCommand(ZOOM_OUT_RANGE_COMMAND);
	            zoomOutRangeMenuItem.setBackground(Utils.backgroundColor);
	            this.zoomOutRangeMenuItem.addActionListener(this);
	            zoomOutMenu.add(this.zoomOutRangeMenuItem);

	            result.add(zoomOutMenu);

	            JMenu autoRangeMenu = new JMenu(
	                    localizationResources.getString("Auto_Range"));
	            autoRangeMenu.setBackground(Utils.backgroundColor);
	            this.zoomResetBothMenuItem = new JMenuItem(
	                    localizationResources.getString("All_Axes"));
	            this.zoomResetBothMenuItem.setActionCommand(
	                    ZOOM_RESET_BOTH_COMMAND);
	            zoomResetBothMenuItem.setBackground(Utils.backgroundColor);
	            this.zoomResetBothMenuItem.addActionListener(this);
	            autoRangeMenu.add(this.zoomResetBothMenuItem);

	            autoRangeMenu.addSeparator();
	            this.zoomResetDomainMenuItem = new JMenuItem(
	                    localizationResources.getString("Domain_Axis"));
	            this.zoomResetDomainMenuItem.setActionCommand(
	                    ZOOM_RESET_DOMAIN_COMMAND);
	            zoomResetDomainMenuItem.setBackground(Utils.backgroundColor);
	            this.zoomResetDomainMenuItem.addActionListener(this);
	            autoRangeMenu.add(this.zoomResetDomainMenuItem);

	            this.zoomResetRangeMenuItem = new JMenuItem(
	                    localizationResources.getString("Range_Axis"));
	            zoomResetRangeMenuItem.setBackground(Utils.backgroundColor);
	            this.zoomResetRangeMenuItem.setActionCommand(
	                    ZOOM_RESET_RANGE_COMMAND);
	            this.zoomResetRangeMenuItem.addActionListener(this);
	            autoRangeMenu.add(this.zoomResetRangeMenuItem);

	            result.addSeparator();
	            result.add(autoRangeMenu);

	        }

	        return result;

	    }

	public String getPlotName() {
		return plotName;
	}

	public void setPlotName(String name) {
		this.plotName = name;
	}
}
