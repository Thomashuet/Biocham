/* BIOCHAM system http://contraintes.inria.fr/BIOCHAM/
 * Copyright 2003-2008, INRIA, Projet Contraintes
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * BioCommands.java
 * by Sylvain Soliman */

package fr.inria.contraintes.biocham.commandLine;

import java.io.*;
import java.util.*;
import java.awt.*;

public class BiochamCommands {
   // array of sorted BIOCHAM commands
   static String[] knownCommands = {
      "***"
   };

   /** Return longest unambiguous command starting with a given string.*/
   static String getContinuation(String cmd) {
      int l = knownCommands.length - 1; // ignore last dummy command
      for (int i=0;i<l;i++)
         if (knownCommands[i].startsWith(cmd)) {
            return commonPrefix(cmd,i,l);
         }
      Toolkit.getDefaultToolkit().beep();
      return cmd;
   }

   /** Return longest common prefix in commands.
    *
    * Starts at a given position in the array of commands and continue up to 
    * a given last position or when @cmd is not a prefix any more.
    */
   static String commonPrefix(String cmd, int start, int end)
   {
      Vector<String> v = new Vector<String> ();
      
      int i=start;

      while (i<end && knownCommands[i].startsWith(cmd)) {
         v.add(knownCommands[i]);
         i++;
      }

      if (v.size() == 1)
         return v.elementAt(0);
 
      Toolkit.getDefaultToolkit().beep();
      
      StringBuffer s = new StringBuffer(v.elementAt(0));
      for (i=1;i<v.size();++i) {
         getCommonPrefix(s, v.elementAt(i));
      }
      return s.toString();
   }

   /** Update a StringBuffer to longest prefix with a given String.*/
   static void getCommonPrefix(StringBuffer sb, String s)
   {
      int i=0;
      while (i<sb.length() && i<s.length()
            && sb.charAt(i) == s.charAt(i))
         i++;
      sb.setLength(i);
   }
}
